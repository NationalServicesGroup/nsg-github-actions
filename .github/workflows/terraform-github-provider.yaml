name: Terraform GitHub Provider
run-name: Terraform Plan and Apply (GitHub Provider)

on:
  workflow_call:
    inputs:
      working_directory:
        description: "Working directory for Terraform"
        required: false
        type: string
        default: "."
      tf_version:
        description: "Terraform version"
        required: false
        type: string
        default: "1.10.0"
      approvers:
        description: "Comma-separated list of GitHub usernames who can approve"
        required: true
        type: string
      minimum_approvals:
        description: "Minimum number of approvals required"
        required: false
        type: number
        default: 1
      approval_timeout_minutes:
        description: "Timeout for approval in minutes"
        required: false
        type: number
        default: 60
    secrets:
      pat_token:
        description: "GitHub Personal Access Token for Terraform GitHub provider"
        required: true
      github_owner:
        description: "GitHub organization/owner name"
        required: true
      gcp_service_account_key:
        description: "GCP service account key (only needed if using GCS backend)"
        required: false

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    outputs:
      terraform_plan: ${{ steps.terraform-plan.outputs.tfplan_human_readable_truncated }}
      has_changes: ${{ steps.terraform-plan.outputs.has_changes }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.gcp_service_account_key }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Terraform Format Check
        working-directory: ${{ inputs.working_directory }}
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        working-directory: ${{ inputs.working_directory }}
        run: terraform init
        env:
          GITHUB_TOKEN: ${{ secrets.pat_token }}
          GITHUB_OWNER: ${{ secrets.github_owner }}

      - name: Terraform Validate
        working-directory: ${{ inputs.working_directory }}
        run: terraform validate

      - name: Terraform Plan
        id: terraform-plan
        working-directory: ${{ inputs.working_directory }}
        run: |
          terraform plan -input=false -out=tfplan

          # Save the plan output to a file
          terraform show -no-color tfplan > plan_output.txt

          # Read plan into variable
          tfplan_human_readable="$(cat plan_output.txt)"
          # GitHub has a limit of 64 KB (65,536 characters)
          tfplan_human_readable_truncated="${tfplan_human_readable:0:60000}"

          # Debug output
          echo "DEBUG: Plan length: ${#tfplan_human_readable}"
          echo "DEBUG: Truncated length: ${#tfplan_human_readable_truncated}"

          # Check if plan has no changes
          if echo "$tfplan_human_readable" | grep -q "No changes. Your infrastructure matches the configuration."; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

          # Save multi-line tfplan as GitHub output
          {
            echo 'tfplan_human_readable_truncated<<PLAN_DELIMITER_END'
            echo "$tfplan_human_readable_truncated"
            if [ ${#tfplan_human_readable} -gt 60000 ]; then
              echo -e "\n!!!!!! TERRAFORM PLAN WAS TRUNCATED !!!!!!"
              echo -e "Find complete plan in workflow execution logs."
            fi
            echo 'PLAN_DELIMITER_END'
          } >> $GITHUB_OUTPUT

          # Add to step summary
          echo "## Terraform Plan ðŸ“–" >> $GITHUB_STEP_SUMMARY
          echo '```hcl' >> $GITHUB_STEP_SUMMARY
          echo "$tfplan_human_readable" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        env:
          GITHUB_TOKEN: ${{ secrets.pat_token }}
          GITHUB_OWNER: ${{ secrets.github_owner }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: |
            ${{ inputs.working_directory }}/tfplan
            ${{ inputs.working_directory }}/plan_output.txt
          retention-days: 1

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const plan = `${{ steps.terraform-plan.outputs.tfplan_human_readable_truncated }}`;
            const commitSha = context.payload.pull_request.head.sha;
            const commitUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${context.issue.number}/commits/${commitSha}`;
            const body = `## Terraform Plan ðŸ“–\n\nCommit: [${commitSha.substring(0, 7)}](${commitUrl})\n\n\`\`\`hcl\n${plan}\n\`\`\``;

            // Find existing terraform plan comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.data.find(comment =>
              comment.body.includes('## Terraform Plan ðŸ“–')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  manual-approval:
    name: Manual Approval
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.has_changes == 'true'

    steps:
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      - name: Read Plan from File
        id: read-plan
        run: |
          PLAN_CONTENT="$(cat plan_output.txt)"
          # Truncate for GitHub issue size limits
          PLAN_TRUNCATED="${PLAN_CONTENT:0:60000}"

          # Save to output using file method
          echo "$PLAN_TRUNCATED" > plan_for_issue.txt
          echo "plan_content<<PLAN_END" >> $GITHUB_OUTPUT
          cat plan_for_issue.txt >> $GITHUB_OUTPUT
          echo "PLAN_END" >> $GITHUB_OUTPUT

      - name: Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.pat_token }}
          approvers: ${{ inputs.approvers }}
          minimum-approvals: ${{ inputs.minimum_approvals }}
          issue-title: "Terraform Apply Approval for ${{ github.repository }}"
          issue-body: |
            Please review the terraform plan and approve the deployment:

            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref_name }}
            **Workflow:** ${{ github.workflow }}
            **Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            ```hcl
            ${{ steps.read-plan.outputs.plan_content }}
            ```
          exclude-workflow-initiator-as-approver: false
          timeout-minutes: ${{ inputs.approval_timeout_minutes }}

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-plan, manual-approval]
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.has_changes == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.gcp_service_account_key }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Terraform Init
        working-directory: ${{ inputs.working_directory }}
        run: terraform init
        env:
          GITHUB_TOKEN: ${{ secrets.pat_token }}
          GITHUB_OWNER: ${{ secrets.github_owner }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ${{ inputs.working_directory }}

      - name: Terraform Apply
        working-directory: ${{ inputs.working_directory }}
        run: terraform apply -auto-approve tfplan
        env:
          GITHUB_TOKEN: ${{ secrets.pat_token }}
          GITHUB_OWNER: ${{ secrets.github_owner }}
