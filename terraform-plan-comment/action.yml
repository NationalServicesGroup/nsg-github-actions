name: "Comment Terraform Plan on PR"
description: "Formats terraform plan output and comments on PR (updates existing comment)"

inputs:
  plan_file:
    description: "Path to the plan output text file"
    required: true
  working_directory:
    description: "Working directory for Terraform"
    required: false
    default: "."
  github_token:
    description: "GitHub token for commenting"
    required: true

runs:
  using: "composite"
  steps:
    - name: Format Plan Output
      id: format-plan
      shell: bash
      run: |
        PLAN_CONTENT="$(cat ${{ inputs.plan_file }})"
        PLAN_TRUNCATED="${PLAN_CONTENT:0:60000}"

        # Save formatted plan to file for PR comment
        {
          echo "$PLAN_TRUNCATED"
          if [ ${#PLAN_CONTENT} -gt 60000 ]; then
            echo ""
            echo "!!!!!! PLAN WAS TRUNCATED !!!!!!"
            echo "View full plan in workflow logs"
          fi
        } > formatted_plan.txt

        # Add to step summary
        echo "## Terraform Plan ðŸ“–" >> $GITHUB_STEP_SUMMARY
        echo '```hcl' >> $GITHUB_STEP_SUMMARY
        cat formatted_plan.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Comment PR with Plan
      uses: actions/github-script@v7
      env:
        PLAN_CONTENT: ${{ steps.format-plan.outputs.formatted_plan }}
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('formatted_plan.txt', 'utf8');

          if (context.eventName !== 'pull_request') {
            console.log('Not a pull request, skipping comment');
            return;
          }

          const commitSha = context.payload.pull_request.head.sha;
          const commitUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${context.issue.number}/commits/${commitSha}`;
          const body = `## Terraform Plan ðŸ“–\n\nCommit: [${commitSha.substring(0, 7)}](${commitUrl})\n\n\`\`\`hcl\n${plan}\n\`\`\``;

          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          const existingComment = comments.data.find(comment =>
            comment.body.includes('## Terraform Plan ðŸ“–')
          );

          if (existingComment) {
            await github.rest.issues.updateComment({
              comment_id: existingComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
            console.log('Updated existing comment');
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
            console.log('Created new comment');
          }
